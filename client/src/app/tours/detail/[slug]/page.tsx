"use client";

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import Link from "next/link";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import LoadingSpinner from "@/components/Loading/LoadingSpinner";
import { tourService, Tour, ItineraryDay } from "@/services/tourService";

export default function TourDetailPage() {
  const params = useParams();
  const slug = params.slug as string;

  const [tour, setTour] = useState<Tour | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isVisible, setIsVisible] = useState(false);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const [showGallery, setShowGallery] = useState(false);
  const [selectedParticipants, setSelectedParticipants] = useState({
    adult: 1,
    child: 0,
    infant: 0
  });

  // Helper function to check if title contains departure location
  const checkTitleContainsDeparture = (
    title: string | undefined,
    departureName: string | undefined
  ) => {
    if (!title || !departureName) return false;

    const titleLower = title.toLowerCase();
    const departureNameLower = departureName.toLowerCase();

    // Check for various formats of departure in title
    if (
      departureNameLower.includes("h·ªì ch√≠ minh") ||
      departureNameLower === "tp. h·ªì ch√≠ minh"
    ) {
      return (
        titleLower.includes("tphcm") ||
        titleLower.includes("tp.hcm") ||
        titleLower.includes("h·ªì ch√≠ minh") ||
        titleLower.includes("s√†i g√≤n")
      );
    }

    if (departureNameLower === "h√† n·ªôi") {
      return titleLower.includes("h√† n·ªôi") || titleLower.includes("hn");
    }

    if (departureNameLower === "ƒë√† n·∫µng") {
      return titleLower.includes("ƒë√† n·∫µng");
    }

    // Generic check
    return titleLower.includes(departureNameLower);
  };

  // Helper function to extract departure from title
  const extractDepartureFromTitle = (title: string | undefined) => {
    if (!title) return null;

    const titleLower = title.toLowerCase();

    // Check for various keywords that indicate departure
    if (
      titleLower.includes("kh·ªüi h√†nh t·ª´ tphcm") ||
      titleLower.includes("kh·ªüi h√†nh t·ª´ h·ªì ch√≠ minh") ||
      titleLower.includes("t·ª´ tp.hcm") ||
      titleLower.includes("t·ª´ s√†i g√≤n")
    ) {
      return "TP. H·ªì Ch√≠ Minh";
    }

    if (
      titleLower.includes("kh·ªüi h√†nh t·ª´ h√† n·ªôi") ||
      titleLower.includes("t·ª´ h√† n·ªôi") ||
      titleLower.includes("t·ª´ hn")
    ) {
      return "H√† N·ªôi";
    }

    if (
      titleLower.includes("kh·ªüi h√†nh t·ª´ ƒë√† n·∫µng") ||
      titleLower.includes("t·ª´ ƒë√† n·∫µng")
    ) {
      return "ƒê√† N·∫µng";
    }

    return null;
  };

  // Helper function to extract departure from slug
  const extractDepartureFromSlug = (slugText: string | undefined) => {
    if (!slugText) return null;

    // Check for departure indicators in slug
    if (
      slugText.includes("-tu-tphcm") ||
      slugText.includes("-tu-ho-chi-minh") ||
      slugText.includes("-tu-sai-gon")
    ) {
      return "TP. H·ªì Ch√≠ Minh";
    }

    if (slugText.includes("-tu-ha-noi") || slugText.includes("-tu-hn")) {
      return "H√† N·ªôi";
    }

    if (slugText.includes("-tu-da-nang")) {
      return "ƒê√† N·∫µng";
    }

    return null;
  };

  useEffect(() => {
    const loadTour = async () => {
      try {
        console.log("üîç Loading tour with slug:", slug);
        console.log("üîç Current URL:", window.location.href);
        console.log("üîç Full URL params:", params);

        // First try exact slug match
        let response = await tourService.getTourBySlug(slug);

        // Enhanced logging for debugging
        console.log("üéØ Tour response:", response);
        console.log("üéØ Response success:", response.success);

        if (response.success) {
          console.log("üéØ Response data:", response.data);
          console.log("üéØ Found tour ID:", response.data?._id);
          console.log("üéØ Found tour slug:", response.data?.slug);
          console.log("üéØ Found tour title:", response.data?.title);
          console.log(
            "üéØ Departure location:",
            response.data?.departureLocation?.name
          );

          // Check if the tour title and departure location match
          const titleContainsDeparture = checkTitleContainsDeparture(
            response.data?.title,
            response.data?.departureLocation?.name
          );

          console.log("üîç Title contains departure:", titleContainsDeparture);

          // If the title contains a departure location that doesn't match the actual departure
          if (!titleContainsDeparture) {
            console.log(
              "‚ö†Ô∏è WARNING: Title departure might not match actual departure location"
            );

            // Try to extract departure from title
            const departureFromTitle = extractDepartureFromTitle(
              response.data?.title
            );
            console.log(
              "üîç Extracted departure from title:",
              departureFromTitle
            );

            if (
              departureFromTitle &&
              departureFromTitle !== response.data?.departureLocation?.name
            ) {
              console.log("‚ö†Ô∏è Departure mismatch detected!");
              console.log(`   Title indicates: ${departureFromTitle}`);
              console.log(
                `   Data indicates: ${response.data?.departureLocation?.name}`
              );

              // Log warning but still use the returned data
              console.log(
                "‚ö†Ô∏è Using data as returned from API - check validate-departures endpoint"
              );
            }
          }

          // Set the tour data
          setTour(response.data);
        } else {
          console.log("üéØ Response error:", response.message);
        }

        // If not found, try partial matching
        if (!response.success) {
          console.log("‚ùå Exact slug not found, trying partial matching...");

          // Get all tours and find by partial title matching
          const allToursResponse = await tourService.getTours({ limit: 100 });
          if (allToursResponse.success) {
            const tours = allToursResponse.data.tours;
            console.log(
              "üìã All available tours:",
              tours.map((t) => ({
                id: t._id,
                title: t.title,
                slug: t.slug,
                departure: t.departureLocation?.name
              }))
            );

            // Try to match by slug part
            const exactSlugParts = slug.split("-");
            console.log("üîç Slug parts to match:", exactSlugParts);

            // First, try to match tour with departure location in slug
            const departureMatches = exactSlugParts.some(
              (part) =>
                part === "tphcm" || part === "ha-noi" || part === "da-nang"
            );

            console.log(
              "üîç Slug contains departure location:",
              departureMatches
            );

            // Try to extract departure from slug
            const departureFromSlug = extractDepartureFromSlug(slug);
            console.log("üîç Extracted departure from slug:", departureFromSlug);

            // First look for tours with matching departure if we could extract one
            let matchedTour = null;

            if (departureFromSlug) {
              console.log(
                "üîç Looking for tours with departure:",
                departureFromSlug
              );
              matchedTour = tours.find(
                (tour) =>
                  tour.slug.includes(slug) &&
                  tour.departureLocation?.name === departureFromSlug
              );

              if (matchedTour) {
                console.log(
                  "‚úÖ Found matching tour with correct departure:",
                  matchedTour.title
                );
              }
            }

            // If no match yet, try a more general title match
            if (!matchedTour) {
              // Try to find tour by matching title keywords
              const slugKeywords = slug
                .split("-")
                .filter((word) => word.length > 2);
              console.log("üîç Searching with keywords:", slugKeywords);

              matchedTour = tours.find((tour) => {
                const titleWords = tour.title
                  .toLowerCase()
                  .normalize("NFD")
                  .replace(/[\u0300-\u036f]/g, "")
                  .replace(/ƒë/g, "d")
                  .replace(/ƒê/g, "D")
                  .split(/[\s\-_,\.]+/);

                const matchCount = slugKeywords.filter((keyword) =>
                  titleWords.some(
                    (word) => word.includes(keyword) || keyword.includes(word)
                  )
                ).length;

                console.log(
                  `üîç Checking tour: ${tour.title}, match count: ${matchCount}, departure: ${tour.departureLocation?.name}`
                );
                return matchCount >= Math.min(3, slugKeywords.length * 0.6);
              });
            }

            if (matchedTour) {
              console.log("‚úÖ Found matching tour:", matchedTour.title);
              console.log(
                "üîç Matched tour departure:",
                matchedTour.departureLocation?.name
              );
              setTour(matchedTour);
            } else {
              console.log("‚ùå No matching tour found");
            }
          }
        } else if (response.success && response.data) {
          console.log("‚úÖ Setting tour data:", response.data);
          console.log(
            "üîç Tour departure location:",
            response.data.departureLocation?.name
          );
          setTour(response.data);
        }
      } catch (error) {
        console.error("‚ùå Error loading tour:", error);
      } finally {
        setIsLoading(false);
        setTimeout(() => setIsVisible(true), 100);
      }
    };

    if (slug) {
      loadTour();
    }
  }, [slug, params]); // Add params to dependency array

  const openGallery = (index: number = 0) => {
    setSelectedImageIndex(index);
    setShowGallery(true);
    document.body.style.overflow = "hidden";
  };

  const closeGallery = () => {
    setShowGallery(false);
    document.body.style.overflow = "unset";
  };

  const nextImage = () => {
    if (tour) {
      setSelectedImageIndex((prev) => (prev + 1) % tour.images.length);
    }
  };

  const prevImage = () => {
    if (tour) {
      setSelectedImageIndex(
        (prev) => (prev - 1 + tour.images.length) % tour.images.length
      );
    }
  };

  const calculateTotalPrice = () => {
    if (!tour) return 0;

    const discountedPrice = tourService.getDiscountedPrice(
      tour.price,
      tour.discount
    );
    const adultTotal = selectedParticipants.adult * discountedPrice;
    const childTotal =
      selectedParticipants.child *
      tourService.getDiscountedPrice(tour.pricingByAge.child, tour.discount);
    const infantTotal =
      selectedParticipants.infant *
      tourService.getDiscountedPrice(tour.pricingByAge.infant, tour.discount);

    return adultTotal + childTotal + infantTotal;
  };

  const updateParticipants = (
    type: "adult" | "child" | "infant",
    value: number
  ) => {
    setSelectedParticipants((prev) => ({
      ...prev,
      [type]: Math.max(0, value)
    }));
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-teal-50 to-blue-100 flex items-center justify-center">
        <LoadingSpinner
          type="travel"
          size="xl"
          text="ƒêang t·∫£i th√¥ng tin tour..."
        />
      </div>
    );
  }

  if (!tour) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-teal-50 to-blue-100">
        <Header />
        <div className="container mx-auto px-4 pt-24 pb-16 text-center">
          <div className="text-6xl mb-4">üòï</div>
          <h1 className="text-2xl font-bold text-gray-800 mb-4">
            Kh√¥ng t√¨m th·∫•y tour
          </h1>
          <p className="text-gray-600 mb-8">
            Tour b·∫°n ƒëang t√¨m ki·∫øm c√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c kh√¥ng t·ªìn t·∫°i.
            <br />
            <span className="text-sm text-gray-500 mt-2 block">
              Slug t√¨m ki·∫øm: {slug}
            </span>
          </p>
          <div className="space-y-4">
            <Link
              href="/tours"
              className="bg-gradient-to-r from-green-600 to-blue-600 text-white px-6 py-3 rounded-lg hover:shadow-lg transition-all duration-300 inline-block"
            >
              ‚Üê Xem t·∫•t c·∫£ tour
            </Link>
            <br />
            <Link
              href="/tours/phu-quoc"
              className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-3 rounded-lg hover:shadow-lg transition-all duration-300 inline-block"
            >
              Xem tour Ph√∫ Qu·ªëc
            </Link>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  // Parse itinerary from new structure - Enhanced debugging
  const getItineraryDays = (): ItineraryDay[] => {
    console.log("üîç Processing itinerary for tour:", tour?._id);
    console.log("üîç Tour title:", tour?.title);
    console.log("üîç Full tour object:", tour);
    console.log("üîç Itinerary field specifically:", tour?.itinerary);
    console.log("üîç Itinerary type:", typeof tour?.itinerary);
    console.log("üîç Itinerary is null?:", tour?.itinerary === null);
    console.log("üîç Itinerary is undefined?:", tour?.itinerary === undefined);

    if (!tour?.itinerary) {
      console.log("‚ùå No itinerary found - returning empty array");
      return [];
    }

    const itinerary = tour.itinerary;
    console.log("üìä Itinerary content:", itinerary);
    console.log("üìä Itinerary type:", typeof itinerary);
    console.log("üìä Is array:", Array.isArray(itinerary));

    // Handle object-based itinerary (new format)
    if (
      typeof itinerary === "object" &&
      !Array.isArray(itinerary) &&
      itinerary !== null
    ) {
      const days: ItineraryDay[] = [];

      // Get all keys and filter for day keys
      const allKeys = Object.keys(itinerary);
      console.log("üîë All keys:", allKeys);

      // Find day keys (day1, day2, etc.)
      const dayKeys = allKeys.filter((key) => /^day\d+$/i.test(key));
      console.log("üìÖ Day keys found:", dayKeys);

      if (dayKeys.length === 0) {
        console.log("‚ùå No day keys found in itinerary object");
        console.log("üîç Available keys:", allKeys);
        console.log(
          "üîç Sample key values:",
          allKeys.slice(0, 3).map((key) => ({ [key]: itinerary[key] }))
        );
        return [];
      }

      // Sort day keys by number
      const sortedDayKeys = dayKeys.sort((a, b) => {
        const numA = parseInt(a.replace(/day/i, "")) || 0;
        const numB = parseInt(b.replace(/day/i, "")) || 0;
        return numA - numB;
      });

      console.log("üìÖ Sorted day keys:", sortedDayKeys);

      // Process each day
      sortedDayKeys.forEach((dayKey, index) => {
        const dayData = itinerary[dayKey];
        console.log(`üìù Processing ${dayKey}:`, dayData);
        console.log(`üìù Day data type:`, typeof dayData);
        console.log(
          `üìù Day data keys:`,
          dayData ? Object.keys(dayData) : "N/A"
        );

        if (dayData && typeof dayData === "object") {
          // Extract title and description
          const title = dayData.title || `Ng√†y ${index + 1}`;
          const description = dayData.description || "";

          console.log(`üìù Extracted title:`, title);
          console.log(`üìù Extracted description length:`, description.length);

          if (title && description) {
            days.push({ title, description });
            console.log(`‚úÖ Added ${dayKey}:`, {
              title: title.substring(0, 50) + "...",
              descLength: description.length
            });
          } else {
            console.log(`‚ö†Ô∏è Missing data in ${dayKey}:`, {
              hasTitle: !!title,
              hasDescription: !!description,
              titleValue: title,
              descValue: description?.substring(0, 100) + "..."
            });
          }
        } else {
          console.log(`‚ùå Invalid day data for ${dayKey}:`, typeof dayData);
        }
      });

      console.log("üéâ Total days processed:", days.length);
      return days;
    }

    // Handle array-based itinerary (legacy format)
    if (Array.isArray(itinerary)) {
      console.log("üìã Processing as array structure");
      console.log("üìã Array length:", itinerary.length);
      console.log("üìã Array content sample:", itinerary.slice(0, 2));
      return itinerary.map(
        (item, index): ItineraryDay => ({
          title: `Ng√†y ${index + 1}`,
          description:
            typeof item === "string"
              ? item
              : item?.description || JSON.stringify(item)
        })
      );
    }

    console.log("‚ùå Unknown itinerary format");
    console.log("‚ùå Itinerary value:", itinerary);
    return [];
  };

  const itineraryDays = getItineraryDays();

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-teal-50 to-blue-100">
      <Header />

      {/* Breadcrumb */}
      <div className="pt-24 pb-2 md:pb-4">
        <div className="container mx-auto px-4">
          <nav className="text-xs md:text-sm text-gray-600 overflow-x-auto whitespace-nowrap">
            <Link href="/" className="hover:text-blue-600">
              Trang ch·ªß
            </Link>
            <span className="mx-2">‚Ä∫</span>
            <Link href="/destinations" className="hover:text-blue-600">
              VI·ªÜT NAM
            </Link>
            <span className="mx-2">‚Ä∫</span>
            <Link href="/tours" className="hover:text-blue-600">
              Tours
            </Link>
            <span className="mx-2">‚Ä∫</span>
            <span className="text-gray-800 font-medium">{tour.title}</span>
          </nav>
        </div>
      </div>

      <div className="container mx-auto px-4 pb-12 md:pb-16">
        {/* Use flex-col on mobile and grid on larger screens */}
        <div className="flex flex-col lg:grid lg:grid-cols-3 gap-6 lg:gap-8">
          {/* Main Content - Full width on mobile */}
          <div className="lg:col-span-2">
            {/* Hero Gallery */}
            <div
              className={`bg-white rounded-xl md:rounded-2xl shadow-lg overflow-hidden mb-6 md:mb-8 transition-all duration-1000 ${
                isVisible ? "animate-fade-in" : "opacity-0"
              }`}
            >
              <div className="relative h-56 sm:h-64 md:h-80 lg:h-96">
                <div
                  className="w-full h-full bg-cover bg-center cursor-pointer"
                  style={{
                    backgroundImage: `url('${
                      tour.images[selectedImageIndex] || tour.images[0]
                    }')`
                  }}
                  onClick={() => openGallery(selectedImageIndex)}
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent" />

                {/* Gallery Controls */}
                <button
                  onClick={() => openGallery(selectedImageIndex)}
                  className="absolute top-4 right-4 bg-black/50 text-white px-4 py-2 rounded-lg flex items-center space-x-2 hover:bg-black/70 transition-colors"
                >
                  <svg
                    className="w-5 h-5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                    />
                  </svg>
                  <span className="text-sm font-medium">
                    Xem ·∫£nh ({tour.images.length})
                  </span>
                </button>

                {/* Navigation arrows */}
                {tour.images.length > 1 && (
                  <>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        setSelectedImageIndex((prev) =>
                          prev === 0 ? tour.images.length - 1 : prev - 1
                        );
                      }}
                      className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors"
                    >
                      <svg
                        className="w-5 h-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M15 19l-7-7 7-7"
                        />
                      </svg>
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        setSelectedImageIndex(
                          (prev) => (prev + 1) % tour.images.length
                        );
                      }}
                      className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors"
                    >
                      <svg
                        className="w-5 h-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </button>
                  </>
                )}

                {/* Image indicators */}
                <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
                  {tour.images.map((_, index) => (
                    <button
                      key={index}
                      onClick={(e) => {
                        e.stopPropagation();
                        setSelectedImageIndex(index);
                      }}
                      className={`w-2 h-2 rounded-full transition-colors ${
                        index === selectedImageIndex
                          ? "bg-white"
                          : "bg-white/50"
                      }`}
                    />
                  ))}
                </div>
              </div>

              {/* Thumbnail strip - horizontally scrollable on mobile */}
              {tour.images.length > 1 && (
                <div className="p-3 md:p-4 border-t border-gray-200">
                  <div className="flex space-x-2 overflow-x-auto pb-2 md:pb-0 snap-x">
                    {tour.images.slice(0, 8).map((image, index) => (
                      <button
                        key={index}
                        onClick={() => setSelectedImageIndex(index)}
                        className={`flex-shrink-0 w-14 h-10 md:w-16 md:h-12 rounded-lg overflow-hidden border-2 transition-colors snap-start ${
                          index === selectedImageIndex
                            ? "border-blue-500"
                            : "border-gray-200"
                        }`}
                      >
                        <div
                          className="w-full h-full bg-cover bg-center"
                          style={{ backgroundImage: `url('${image}')` }}
                        />
                      </button>
                    ))}
                    {tour.images.length > 8 && (
                      <div className="flex-shrink-0 w-16 h-12 bg-gray-100 rounded-lg flex items-center justify-center text-xs text-gray-500 font-medium">
                        +{tour.images.length - 8}
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>

            {/* Tour Info */}
            <div
              className={`bg-white rounded-xl md:rounded-2xl shadow-lg p-4 md:p-6 mb-6 md:mb-8 transition-all duration-1000 delay-300 ${
                isVisible ? "animate-slide-up" : "opacity-0"
              }`}
            >
              <div className="flex flex-col md:flex-row md:items-start md:justify-between mb-4 md:mb-6">
                <div>
                  <h1 className="text-xl sm:text-2xl md:text-3xl font-bold text-gray-800 mb-3 md:mb-4">
                    {tour.title}
                  </h1>
                  <div className="flex flex-wrap items-center gap-2 md:gap-4 text-xs md:text-sm text-gray-600">
                    <div className="flex items-center bg-blue-50 px-3 py-1 rounded-full">
                      <svg
                        className="w-4 h-4 mr-1 text-blue-600"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                        />
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                        />
                      </svg>
                      <span className="font-medium">Kh·ªüi h√†nh t·ª´:</span>
                      <span className="ml-1 text-blue-700">
                        {tour.departureLocation.name}
                      </span>
                    </div>
                    <div className="flex items-center">
                      <svg
                        className="w-4 h-4 mr-1"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                      <span>Th·ªùi gian: {tour.duration}</span>
                    </div>
                    <div className="flex items-center">
                      <svg
                        className="w-4 h-4 mr-1"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                        />
                      </svg>
                      {new Date(tour.startDate).toLocaleDateString("vi-VN")} -{" "}
                      {new Date(tour.endDate).toLocaleDateString("vi-VN")}
                    </div>
                  </div>
                </div>
                <div className="text-right mt-3 md:mt-0">
                  {tour.rating && tour.rating > 0 && (
                    <div className="flex items-center mb-2">
                      <span className="text-yellow-500 text-lg">‚≠ê</span>
                      <span className="ml-1 font-semibold">{tour.rating}</span>
                      <span className="ml-1 text-gray-500">
                        ({tour.reviewCount || 0} ƒë√°nh gi√°)
                      </span>
                    </div>
                  )}
                  {tour.isFeatured && (
                    <span className="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-sm font-medium">
                      ‚≠ê Tour n·ªïi b·∫≠t
                    </span>
                  )}
                </div>
              </div>

              {/* Description */}
              <div className="mb-6">
                <h3 className="text-lg md:text-xl font-semibold text-gray-800 mb-2 md:mb-3">
                  M√¥ t·∫£ tour
                </h3>
                {/* Show warning if the title doesn't match the departure location */}
                {tour.title &&
                  tour.departureLocation &&
                  !checkTitleContainsDeparture(
                    tour.title,
                    tour.departureLocation.name
                  ) && (
                    <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg mb-4">
                      <div className="flex items-start">
                        <div className="text-yellow-600 mr-2">‚ö†Ô∏è</div>
                        <div>
                          <h5 className="font-medium text-yellow-800">
                            L∆∞u √Ω v·ªÅ ƒëi·ªÉm kh·ªüi h√†nh
                          </h5>
                          <p className="text-sm text-yellow-700">
                            Tour n√†y s·∫Ω kh·ªüi h√†nh t·ª´{" "}
                            <strong>{tour.departureLocation.name}</strong>. Vui
                            l√≤ng ki·ªÉm tra th√¥ng tin chi ti·∫øt v·ªõi nh√¢n vi√™n t∆∞
                            v·∫•n.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                <p className="text-gray-600 leading-relaxed">
                  {tour.description}
                </p>
              </div>

              {/* Availability */}
              <div className="mb-6">
                <h3 className="text-lg md:text-xl font-semibold text-gray-800 mb-2 md:mb-3">
                  T√¨nh tr·∫°ng ch·ªó
                </h3>
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                  <div className="flex items-center space-x-4">
                    <span className="text-green-600 font-medium">
                      C√≤n {tour.availableSeats} ch·ªó tr·ªëng
                    </span>
                    <span className="text-gray-500">
                      / {tour.seats} ch·ªó t·ªëi ƒëa
                    </span>
                  </div>
                  <div className="w-full sm:w-48">
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div
                        className="bg-green-500 h-3 rounded-full transition-all duration-300"
                        style={{
                          width: `${(tour.availableSeats / tour.seats) * 100}%`
                        }}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Itinerary - Enhanced for new structure */}
            <div
              className={`bg-white rounded-2xl shadow-lg p-6 mb-8 transition-all duration-1000 delay-500 ${
                isVisible ? "animate-slide-up" : "opacity-0"
              }`}
            >
              <h3 className="text-xl font-semibold text-gray-800 mb-6">
                L·ªãch tr√¨nh tour
              </h3>

              {itineraryDays.length > 0 ? (
                <div className="space-y-8">
                  {itineraryDays.map((day, index) => (
                    <div key={index} className="relative">
                      {/* Timeline line */}
                      {index !== itineraryDays.length - 1 && (
                        <div className="absolute left-5 top-12 w-0.5 h-full bg-gradient-to-b from-blue-300 to-blue-100"></div>
                      )}

                      <div className="flex space-x-4">
                        {/* Day number circle */}
                        <div className="flex-shrink-0 w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-full flex items-center justify-center font-bold text-sm shadow-lg relative z-10">
                          {index + 1}
                        </div>

                        <div className="flex-1 pb-4">
                          {/* Day title */}
                          <div className="mb-3">
                            <h4 className="text-lg font-bold text-gray-800 mb-1">
                              {day.title}
                            </h4>
                            <div className="w-16 h-1 bg-gradient-to-r from-blue-500 to-blue-300 rounded-full"></div>
                          </div>

                          {/* Day description */}
                          <div className="bg-gradient-to-r from-blue-50 to-white p-4 rounded-lg border-l-4 border-blue-400 shadow-sm">
                            <div className="text-gray-700 leading-relaxed space-y-3">
                              {day.description
                                .split("\n")
                                .map((paragraph, paragraphIndex) => {
                                  if (!paragraph.trim()) return null;

                                  return (
                                    <div key={paragraphIndex}>
                                      {paragraph
                                        .trim()
                                        .startsWith("L·ª±a ch·ªçn") ? (
                                        <div className="font-semibold text-blue-700 bg-blue-100 px-3 py-2 rounded-lg mb-2">
                                          üìã {paragraph.trim()}
                                        </div>
                                      ) : paragraph.trim().includes(":") &&
                                        paragraph.length < 100 ? (
                                        <h5 className="font-semibold text-gray-800 mt-4 mb-2 flex items-center">
                                          <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                                          {paragraph.trim()}
                                        </h5>
                                      ) : (
                                        <div className="text-gray-600 leading-relaxed">
                                          <p className="mb-2">
                                            {paragraph.trim()}
                                          </p>
                                        </div>
                                      )}
                                    </div>
                                  );
                                })}
                            </div>

                            {/* Activity icons based on content */}
                            <div className="flex flex-wrap gap-2 mt-4">
                              {day.description.includes("t·∫Øm bi·ªÉn") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                  üèä‚Äç‚ôÄÔ∏è T·∫Øm bi·ªÉn
                                </span>
                              )}
                              {day.description.includes("Safari") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                  ü¶Å Safari
                                </span>
                              )}
                              {day.description.includes("VinWonder") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                                  üé¢ VinWonder
                                </span>
                              )}
                              {day.description.includes("cano") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-cyan-100 text-cyan-800">
                                  üõ•Ô∏è Cano
                                </span>
                              )}
                              {day.description.includes("ch√πa") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                  üèõÔ∏è Ch√πa
                                </span>
                              )}
                              {day.description.includes("Grand World") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">
                                  üè∞ Grand World
                                </span>
                              )}
                              {day.description.includes("Dinh C·∫≠u") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                  ‚õ©Ô∏è Dinh C·∫≠u
                                </span>
                              )}
                              {day.description.includes("Sunset Town") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                                  üåÖ Sunset Town
                                </span>
                              )}
                              {day.description.includes("C·∫ßu H√¥n") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-pink-100 text-pink-800">
                                  üíï C·∫ßu H√¥n
                                </span>
                              )}
                              {day.description.includes("ng·ªçc trai") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                  ü¶™ Ng·ªçc trai
                                </span>
                              )}
                              {day.description.includes("l·∫∑n ng·∫Øm san h√¥") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                  üê† L·∫∑n ng·∫Øm san h√¥
                                </span>
                              )}
                              {day.description.includes("ti√™u") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                  üå∂Ô∏è V∆∞·ªùn ti√™u
                                </span>
                              )}
                              {day.description.includes("n∆∞·ªõc m·∫Øm") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-amber-100 text-amber-800">
                                  üêü N∆∞·ªõc m·∫Øm
                                </span>
                              )}
                              {day.description.includes("r∆∞·ª£u Sim") && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                                  üç∑ R∆∞·ª£u Sim
                                </span>
                              )}
                              {(day.description.includes("ƒÇn s√°ng") ||
                                day.description.includes("ƒÇn tr∆∞a") ||
                                day.description.includes("ƒÇn t·ªëi")) && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                                  üçΩÔ∏è Bao g·ªìm b·ªØa ƒÉn
                                </span>
                              )}
                            </div>

                            {/* Add detailed breakdown for complex activities */}
                            {day.description.includes("L·ª±a ch·ªçn") && (
                              <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                                <h6 className="font-semibold text-yellow-800 mb-2 flex items-center">
                                  <span className="mr-2">‚ö°</span>
                                  Ho·∫°t ƒë·ªông t√πy ch·ªçn
                                </h6>
                                <p className="text-sm text-yellow-700">
                                  Tour cung c·∫•p nhi·ªÅu l·ª±a ch·ªçn ho·∫°t ƒë·ªông ƒë·ªÉ b·∫°n
                                  c√≥ th·ªÉ t√πy ch·ªânh tr·∫£i nghi·ªám theo s·ªü th√≠ch.
                                  Chi ph√≠ cho c√°c ho·∫°t ƒë·ªông t·ª± t√∫c s·∫Ω ƒë∆∞·ª£c h∆∞·ªõng
                                  d·∫´n vi√™n th√¥ng b√°o c·ª• th·ªÉ.
                                </p>
                              </div>
                            )}

                            {/* Time indicators */}
                            {(day.description.includes("s√°ng") ||
                              day.description.includes("chi·ªÅu") ||
                              day.description.includes("t·ªëi")) && (
                              <div className="mt-3 flex flex-wrap gap-2">
                                {day.description.includes("s√°ng") && (
                                  <span className="text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full">
                                    üåÖ Bu·ªïi s√°ng
                                  </span>
                                )}
                                {day.description.includes("chi·ªÅu") && (
                                  <span className="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full">
                                    ‚òÄÔ∏è Bu·ªïi chi·ªÅu
                                  </span>
                                )}
                                {day.description.includes("t·ªëi") && (
                                  <span className="text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-full">
                                    üåô Bu·ªïi t·ªëi
                                  </span>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <div className="text-4xl mb-4">üìã</div>
                  <h4 className="text-lg font-medium mb-2">
                    L·ªãch tr√¨nh ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                  </h4>
                  <p className="text-sm">
                    Th√¥ng tin chi ti·∫øt l·ªãch tr√¨nh tour s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªõm
                    nh·∫•t.
                  </p>
                  {process.env.NODE_ENV === "development" && (
                    <div className="mt-4 text-xs text-red-500">
                      Debug: Itinerary type = {typeof tour?.itinerary}, Keys ={" "}
                      {tour?.itinerary
                        ? Object.keys(tour.itinerary).join(", ")
                        : "none"}
                    </div>
                  )}
                </div>
              )}

              {/* Tour highlights */}
              <div className="mt-8 p-4 bg-gradient-to-r from-emerald-50 to-blue-50 rounded-lg border border-emerald-200">
                <h5 className="font-semibold text-gray-800 mb-3 flex items-center">
                  <span className="text-emerald-600 mr-2">‚ú®</span>
                  ƒêi·ªÉm n·ªïi b·∫≠t c·ªßa tour
                </h5>
                <div className="grid md:grid-cols-2 gap-2 text-sm text-gray-600">
                  <div className="flex items-center">
                    <span className="text-green-500 mr-2">‚úì</span>
                    Kh√°m ph√° VinWonder & Safari
                  </div>
                  <div className="flex items-center">
                    <span className="text-green-500 mr-2">‚úì</span>
                    T·∫Øm bi·ªÉn B√£i Sao tuy·ªát ƒë·∫πp
                  </div>
                  <div className="flex items-center">
                    <span className="text-green-500 mr-2">‚úì</span>
                    Chi√™m ng∆∞·ª°ng C·∫ßu H√¥n l√£ng m·∫°n
                  </div>
                  <div className="flex items-center">
                    <span className="text-green-500 mr-2">‚úì</span>
                    Tr·∫£i nghi·ªám Grand World
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Booking Sidebar - Displayed below content on mobile, in sidebar on desktop */}
          <div className="lg:col-span-1 mt-6 lg:mt-0">
            <div
              className={`bg-white rounded-xl md:rounded-2xl shadow-lg p-4 md:p-6 sticky top-24 transition-all duration-1000 delay-700 ${
                isVisible ? "animate-slide-up" : "opacity-0"
              }`}
            >
              {/* Price Display */}
              <div className="mb-6">
                <div className="flex items-baseline space-x-2 mb-2">
                  {tour.discount > 0 && (
                    <span className="text-base md:text-lg text-gray-500 line-through">
                      {tourService.formatPrice(tour.price)}
                    </span>
                  )}
                  <span className="text-2xl md:text-3xl font-bold text-green-600">
                    {tourService.formatPrice(
                      tourService.getDiscountedPrice(tour.price, tour.discount)
                    )}
                  </span>
                </div>
                <p className="text-gray-500 text-sm">Gi√°/ng∆∞·ªùi l·ªõn</p>
                {tour.discount > 0 && (
                  <span className="inline-block mt-2 bg-red-100 text-red-600 px-3 py-1 rounded-full text-sm font-bold">
                    Gi·∫£m {tour.discount}%
                  </span>
                )}
              </div>

              {/* Participant Selection - Mobile friendly touchable area */}
              <div className="mb-6 bg-blue-50 p-4 rounded-lg border border-blue-100">
                <h4 className="font-semibold text-gray-800 mb-4">
                  Ch·ªçn s·ªë l∆∞·ª£ng kh√°ch
                </h4>

                {/* Adults */}
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <span className="font-medium text-gray-700">Ng∆∞·ªùi l·ªõn</span>
                    <p className="text-sm text-gray-600">
                      {tourService.formatPrice(
                        tourService.getDiscountedPrice(
                          tour.pricingByAge.adult,
                          tour.discount
                        )
                      )}
                    </p>
                  </div>
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={() =>
                        updateParticipants(
                          "adult",
                          selectedParticipants.adult - 1
                        )
                      }
                      disabled={selectedParticipants.adult <= 1}
                      className="w-10 h-10 rounded-full bg-white border border-blue-300 flex items-center justify-center text-blue-600 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-100 transition-colors"
                    >
                      <span className="text-lg">-</span>
                    </button>
                    <span className="w-8 text-center font-medium bg-white rounded-md px-2 py-1 border border-blue-200 text-blue-700">
                      {selectedParticipants.adult}
                    </span>
                    <button
                      onClick={() =>
                        updateParticipants(
                          "adult",
                          selectedParticipants.adult + 1
                        )
                      }
                      className="w-10 h-10 rounded-full bg-white border border-blue-300 flex items-center justify-center text-blue-600 hover:bg-blue-100 transition-colors"
                    >
                      <span className="text-lg">+</span>
                    </button>
                  </div>
                </div>

                {/* Children - using bigger touch targets */}
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <span className="font-medium text-gray-700">Tr·∫ª em</span>
                    <p className="text-sm text-gray-600">
                      {tourService.formatPrice(
                        tourService.getDiscountedPrice(
                          tour.pricingByAge.child,
                          tour.discount
                        )
                      )}
                    </p>
                  </div>
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={() =>
                        updateParticipants(
                          "child",
                          selectedParticipants.child - 1
                        )
                      }
                      disabled={selectedParticipants.child <= 0}
                      className="w-10 h-10 rounded-full bg-white border border-blue-300 flex items-center justify-center text-blue-600 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-100 transition-colors"
                    >
                      <span className="text-lg">-</span>
                    </button>
                    <span className="w-8 text-center font-medium bg-white rounded-md px-2 py-1 border border-blue-200 text-blue-700">
                      {selectedParticipants.child}
                    </span>
                    <button
                      onClick={() =>
                        updateParticipants(
                          "child",
                          selectedParticipants.child + 1
                        )
                      }
                      className="w-10 h-10 rounded-full bg-white border border-blue-300 flex items-center justify-center text-blue-600 hover:bg-blue-100 transition-colors"
                    >
                      <span className="text-lg">+</span>
                    </button>
                  </div>
                </div>

                {/* Infants */}
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-medium text-gray-700">Em b√©</span>
                    <p className="text-sm text-gray-600">
                      {tourService.formatPrice(
                        tourService.getDiscountedPrice(
                          tour.pricingByAge.infant,
                          tour.discount
                        )
                      )}
                    </p>
                  </div>
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={() =>
                        updateParticipants(
                          "infant",
                          selectedParticipants.infant - 1
                        )
                      }
                      disabled={selectedParticipants.infant <= 0}
                      className="w-10 h-10 rounded-full bg-white border border-blue-300 flex items-center justify-center text-blue-600 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-100 transition-colors"
                    >
                      <span className="text-lg">-</span>
                    </button>
                    <span className="w-8 text-center font-medium bg-white rounded-md px-2 py-1 border border-blue-200 text-blue-700">
                      {selectedParticipants.infant}
                    </span>
                    <button
                      onClick={() =>
                        updateParticipants(
                          "infant",
                          selectedParticipants.infant + 1
                        )
                      }
                      className="w-10 h-10 rounded-full bg-white border border-blue-300 flex items-center justify-center text-blue-600 hover:bg-blue-100 transition-colors"
                    >
                      <span className="text-lg">+</span>
                    </button>
                  </div>
                </div>
              </div>

              {/* Total Price */}
              <div className="mb-6 p-4 bg-gray-50 rounded-lg">
                <div className="flex justify-between items-center">
                  <span className="font-semibold text-gray-800">
                    T·ªïng c·ªông:
                  </span>
                  <span className="text-xl md:text-2xl font-bold text-green-600">
                    {tourService.formatPrice(calculateTotalPrice())}
                  </span>
                </div>
                <p className="text-sm text-gray-500 mt-1">
                  {selectedParticipants.adult +
                    selectedParticipants.child +
                    selectedParticipants.infant}{" "}
                  kh√°ch
                </p>
              </div>

              {/* Booking Button - Larger on mobile for easy tapping */}
              <button
                disabled={tour.availableSeats === 0}
                className="w-full bg-gradient-to-r from-green-600 to-blue-600 text-white font-semibold py-4 md:py-4 rounded-lg hover:shadow-lg transform hover:scale-105 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none text-base md:text-base"
              >
                {tour.availableSeats === 0 ? "H·∫øt ch·ªó" : "ƒê·∫∑t Tour Ngay"}
              </button>

              {/* Contact Info */}
              <div className="mt-6 p-4 border border-gray-200 rounded-lg">
                <h5 className="font-semibold text-gray-800 mb-2">
                  C·∫ßn h·ªó tr·ª£?
                </h5>
                <div className="space-y-2 text-sm text-gray-600">
                  <div className="flex items-center">
                    <svg
                      className="w-4 h-4 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                      />
                    </svg>
                    <a href="tel:081820319" className="hover:text-blue-600">
                      Hotline: 081 820 319
                    </a>
                  </div>
                  <div className="flex items-center">
                    <svg
                      className="w-4 h-4 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                      />
                    </svg>
                    <a
                      href="mailto:info@lutrip.com"
                      className="hover:text-blue-600"
                    >
                      Email: info@lutrip.com
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Photo Gallery Modal - Better optimized for mobile */}
      {showGallery && (
        <div className="fixed inset-0 z-50 bg-black/95 flex items-center justify-center">
          <button
            onClick={closeGallery}
            className="absolute top-4 right-4 text-white hover:text-gray-300 z-10 p-2"
            aria-label="Close gallery"
          >
            <svg
              className="w-6 h-6 md:w-8 md:h-8"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>

          {tour.images.length > 1 && (
            <>
              <button
                onClick={prevImage}
                className="absolute left-2 md:left-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10 p-2"
                aria-label="Previous image"
              >
                <svg
                  className="w-6 h-6 md:w-8 md:h-8"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M15 19l-7-7 7-7"
                  />
                </svg>
              </button>
              <button
                onClick={nextImage}
                className="absolute right-2 md:right-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10 p-2"
                aria-label="Next image"
              >
                <svg
                  className="w-6 h-6 md:w-8 md:h-8"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 5l7 7-7 7"
                  />
                </svg>
              </button>
            </>
          )}

          <div className="max-w-full max-h-[80vh] mx-2 md:mx-4">
            <img
              src={tour.images[selectedImageIndex]}
              alt={`${tour.title} - ·∫¢nh ${selectedImageIndex + 1}`}
              className="max-w-full max-h-full object-contain"
            />
          </div>

          <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white text-sm">
            {selectedImageIndex + 1} / {tour.images.length}
          </div>

          {tour.images.length > 1 && (
            <div className="absolute bottom-12 md:bottom-16 left-0 right-0 flex justify-center overflow-x-auto py-2">
              <div className="flex space-x-2 px-4 max-w-full">
                {tour.images.map((image, index) => (
                  <button
                    key={index}
                    onClick={() => setSelectedImageIndex(index)}
                    className={`w-12 h-9 md:w-16 md:h-12 rounded-md overflow-hidden border-2 flex-shrink-0 ${
                      index === selectedImageIndex
                        ? "border-white"
                        : "border-transparent"
                    }`}
                  >
                    <img
                      src={image}
                      alt={`Thumbnail ${index + 1}`}
                      className="w-full h-full object-cover"
                    />
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      <Footer />
    </div>
  );
}
